// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Users represent Nostr identities that can access the system
model User {
  pubkey     String   @id
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  // Relations
  accountUsers AccountUser[]
  posts        Post[]
  schedules    Schedule[]
  auditLogs    AuditLog[]

  @@map("users")
}

// Accounts represent Nostr identities that own content
model Account {
  pubkey     String   @id
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  // Relations
  settings      Setting?
  accountUsers  AccountUser[]
  posts         Post[]
  queues        Queue[]
  schedules     Schedule[]
  subscription  Subscription?
  payments      Payment[]
  auditLogs     AuditLog[]

  @@map("accounts")
}

// Settings for accounts
model Setting {
  accountPubkey String   @id @map("account_pubkey")
  relays        String   @map("relays") // SQLite doesn't support arrays, so we'll store as JSON string
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  // Relations
  account       Account  @relation(fields: [accountPubkey], references: [pubkey], onDelete: Cascade)

  @@map("settings")
}

// Join table for accounts and users (collaborators)
model AccountUser {
  id                    String   @id @default(uuid())
  accountPubkey         String   @map("account_pubkey")
  userPubkey            String   @map("user_pubkey")
  canCreateDrafts       Boolean  @default(false) @map("can_create_drafts")
  canSchedule           Boolean  @default(false) @map("can_schedule")
  canPublish            Boolean  @default(false) @map("can_publish")
  canManageQueues       Boolean  @default(false) @map("can_manage_queues")
  canManageCollaborators Boolean  @default(false) @map("can_manage_collaborators")
  canViewMetrics        Boolean  @default(false) @map("can_view_metrics")
  invitationStatus      String   @default("pending") @map("invitation_status")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @map("updated_at")

  // Relations
  account               Account  @relation(fields: [accountPubkey], references: [pubkey], onDelete: Cascade)
  user                  User     @relation(fields: [userPubkey], references: [pubkey], onDelete: Cascade)

  @@unique([accountPubkey, userPubkey])
  @@map("account_users")
}

// Posts represent Nostr events (notes, articles, etc.)
model Post {
  id                 String   @id @default(uuid())
  accountPubkey      String   @map("account_pubkey")
  authorPubkey       String   @map("author_pubkey")
  kind               Int
  rawEvents          String   @map("raw_events") // JSON array of raw Nostr events, stored as string
  originalPostNostrId String?  @map("original_post_nostr_id")
  isDraft            Boolean  @default(true) @map("is_draft")
  nostrEventId       String?  @unique @map("nostr_event_id")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")

  // Relations
  account            Account  @relation(fields: [accountPubkey], references: [pubkey], onDelete: Cascade)
  author             User     @relation(fields: [authorPubkey], references: [pubkey], onDelete: Cascade)
  schedules          Schedule[]

  @@index([accountPubkey])
  @@index([authorPubkey])
  @@index([isDraft])
  @@map("posts")
}

// Queues organize content within an account
model Queue {
  id            String   @id @default(uuid())
  accountPubkey String   @map("account_pubkey")
  name          String
  description   String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  // Relations
  account       Account  @relation(fields: [accountPubkey], references: [pubkey], onDelete: Cascade)
  schedules     Schedule[]

  @@unique([accountPubkey, name])
  @@index([accountPubkey])
  @@map("queues")
}

// Schedules associate posts with queues and define when they should be published
model Schedule {
  id                 String    @id @default(uuid())
  postId             String    @map("post_id")
  queueId            String    @map("queue_id")
  accountPubkey      String    @map("account_pubkey")
  authorPubkey       String    @map("author_pubkey")
  scheduledAt        DateTime? @map("scheduled_at")
  triggerType        String?   @map("trigger_type")
  triggerDetails     String?   @map("trigger_details") // JSON stored as string
  triggerExpiresAt   DateTime? @map("trigger_expires_at")
  relays             String    @map("relays") // JSON stored as string
  status             String    @default("pending") @map("status")
  publishAttemptedAt DateTime? @map("publish_attempted_at")
  publishError       String?   @map("publish_error")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  // Relations
  post               Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  queue              Queue    @relation(fields: [queueId], references: [id], onDelete: Cascade)
  account            Account  @relation(fields: [accountPubkey], references: [pubkey], onDelete: Cascade)
  author             User     @relation(fields: [authorPubkey], references: [pubkey], onDelete: Cascade)

  @@index([status, scheduledAt])
  @@index([accountPubkey])
  @@map("schedules")
}

// Subscriptions track the subscription status of accounts
model Subscription {
  id                 String    @id @default(uuid())
  accountPubkey      String    @unique @map("account_pubkey")
  status             String    @map("status")
  currentPeriodStart DateTime? @map("current_period_start")
  currentPeriodEnd   DateTime? @map("current_period_end")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  // Relations
  account            Account   @relation(fields: [accountPubkey], references: [pubkey], onDelete: Cascade)

  @@index([status])
  @@map("subscriptions")
}

// Payments track payment transactions
model Payment {
  id               String   @id @default(uuid())
  accountPubkey    String   @map("account_pubkey")
  amount           Float
  currency         String
  paymentReference String?  @map("payment_reference")
  paymentMethod    String   @map("payment_method")
  paidAt           DateTime @default(now()) @map("paid_at")
  description      String?
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  account          Account  @relation(fields: [accountPubkey], references: [pubkey], onDelete: Cascade)

  @@map("payments")
}

// AuditLogs track actions in the system
model AuditLog {
  id            String   @id @default(uuid())
  accountPubkey String?  @map("account_pubkey")
  userPubkey    String?  @map("user_pubkey")
  action        String
  context       String?  // JSON stored as string
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  account       Account? @relation(fields: [accountPubkey], references: [pubkey], onDelete: Cascade)
  user          User?    @relation(fields: [userPubkey], references: [pubkey], onDelete: SetNull)

  @@map("audit_logs")
}
